// webppl refpred.wppl
var binParam = 4;

var stateParams = {
  sub: {mu: 1, sigma: 0.5}, //paramsFromR.priorParams.sub[0],
  super: {mu: 0, sigma: 1}// paramsFromR.priorParams.super[0]
};

var alphas = {s1: 3};

var round = function(x){
  return Math.round(x*10)/10
}

var stateVals = map(
  round,
  _.range(stateParams.super.mu - 2 * stateParams.super.sigma,
          stateParams.super.mu + 2 * stateParams.super.sigma + stateParams.super.sigma/binParam,
          stateParams.super.sigma/binParam)
);

var stateProbs = {
  sub: map(function(s){
    Math.exp(Gaussian(stateParams.sub).score(s))+
    Number.EPSILON
  }, stateVals),
  super: map(function(s){
    Math.exp(Gaussian(stateParams.super).score(s))+
    Number.EPSILON
  }, stateVals)
};

var statePrior = {
  sub: Infer({
    model: function(){ return categorical({vs: stateVals, ps: stateProbs.sub}) }
  }),
  super: Infer({
    model: function(){ return categorical({ vs: stateVals, ps: stateProbs.super}) }
  })
};

var thresholdBins ={
  positive: map(function(x){
    return  x - (1/(binParam*2));
  }, sort(statePrior.super.support())),
  negative: map(function(x){
    return  x + (1/(binParam*2));
  }, sort(statePrior.super.support()))
};

var thresholdPrior = cache(function(form){
  return Infer({
    model: function() { return uniformDraw(thresholdBins[form]) }
  });
});

// var utterances = { positive: ["positive_Adjective", "positive_sub", "positive_super"], negative: ["negative_Adjective", "negative_sub", "negative_super"] };

var utterances = {
  positive: ["positive_Adjective","negative_Adjective","silence_silence"],
  negative: ["positive_Adjective","negative_Adjective", "silence_silence"]
};

var utteranceProbs = [1, 1, 1];
var utterancePrior = cache(function(form){
  return Infer({
    model: function() {
      return categorical({
        vs: utterances[form],
        ps: utteranceProbs
      })
    }
  })
});

var meaning = function(utterance, state, threshold) {
  utterance == "positive" ? state > threshold ? flip(0.9999) : flip(0.0001) :
  utterance == "negative" ? state < threshold ? flip(0.9999) : flip(0.0001) :
  true
}

var classPrior = Infer({
  model: function(){return uniformDraw(["sub", "super"])}
});

var literalListener = cache(function(u, comparisonClass) {
  Infer({model: function(){
    var adj = u.split("_")[0]
    var threshold = adj == "silence" ? -99 :  sample(thresholdPrior(adj))
    var cc = u.split("_")[1] == "Adjective" ?
        comparisonClass :
    u.split("_")[1] == "silence" ?
        comparisonClass :
    u.split("_")[1]

    var state = sample(statePrior[cc]);
    var m = meaning(adj, state, threshold);
    condition(m);
    return state;
  }})
}, 10000)

var speaker1 = cache(function(state, comparisonClass, form) {
  Infer({model: function(){
    var utterance = sample(utterancePrior(form))
    var L0 = literalListener(utterance, comparisonClass)
    factor( alphas.s1 * L0.score(state) )
    return utterance
  }})
}, 10000)

var pragmaticListener = function(form) {
  Infer({model: function(){
    var utterance = form + "_Adjective";
    var comparisonClass = sample(classPrior);
    var state = sample(statePrior["sub"]);
    var S1 = speaker1(state, comparisonClass, form);
    observe(S1, utterance);
    return comparisonClass
  }})
}
pragmaticListener('positive')
