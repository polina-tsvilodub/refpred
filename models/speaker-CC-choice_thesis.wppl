var exp = function(x){return Math.exp(x)}

// // for discretization

var binParam = 3;

var round = function(x){
  return Math.round(x*10)/10
}

// introduce parameters for three possible subordinate and a basic category
var stateParams = {
  greatdane: {mu: 1, sigma: 1},
  labrador: {mu: 0, sigma: 1},
  chihuahua: {mu: -1, sigma: 1},
  dog: {mu: 0, sigma: 1}
};

// rangle of possible sizes
var stateVals = [-2,-1.7,-1.3,-1,-0.7,-0.3,0,0.3,0.7,1,1.3,1.7,2]


// probabilitites of possible sizes depending on cc
var stateProbs = cache(function(cc) {
  return map(function(s){
    exp(Gaussian(stateParams[cc]).score(s))+
      Number.EPSILON
  }, stateVals)
});


// generate the uniform threshold prior
var thresholdBins ={
  positive: map(function(x){
    return  x - (1/(binParam*2));
  }, sort(stateVals)),
  negative: map(function(x){
    return  x + (1/(binParam*2));
  }, sort(stateVals))
};

var thresholdPrior = cache(function(form){
  return Infer({
    model: function() { return uniformDraw(thresholdBins[form]) }
  });
});

///

// joint state prior: the referent is sampled from the context
// this allows to compute how informative an N is in order to refer to a target in the given context
// their sizes are sampled from a distribution set by the subordinate comparison class
// corresponding the sampled referent or the passed CC

// the statePrior is different for L1 and L0:
// while L1 knows the subordinate category of a referent he sampled
// and the size is sampled from respective subordinate category,
// L0 samples the size according to the CC passed (which can be sub or super)

var statePriorL1 = function( context) {
  Infer({
    model: function() {
      var ref = uniformDraw(context);
      var size = categorical({vs: stateVals, ps: stateProbs(ref["kind"])});
      return {
        referent: ref["kind"],
        id: ref["id"],
        property: size
      }
    }
  })
};

// L0 state prior, relying on the passed CC only
// aslo used for threshold sampling
var statePriorL0 = function(cc, cont) {
  Infer({
    model: function() {
      var ref = uniformDraw(cont);
      var size = categorical({vs: stateVals, ps: stateProbs(cc)});
      return {
        referent: ref,
        property: size
      }
    }
  })
};



var context = {
  // basic-level context, with a 2 members from three different subordinate categories
  dog: [
    {kind: "greatdane", id: "gd1"},
    {kind: "greatdane", id: "gd2"},
    {kind: "labrador", id: "lb1"},
    {kind: "labrador", id: "lb2"},
    {kind: "chihuahua", id : "ch1"},
    {kind: "chihuahua", id: "ch2"}
  ],
  // the listener does not have access to the properties of the individual context members (i.e., there is no size property)
  greatdane: [
    {kind: "greatdane", id: "gd1a"},
    {kind: "greatdane", id: "gd2a"},
    {kind: "greatdane", id: "gd3"},
    {kind: "greatdane", id: "gd4"},
    {kind: "greatdane", id: "gd5"},
    {kind: "greatdane", id: "gd6"}
  ]
}

// compute meaning of subject
var meaning_reference = function(referring_expression, referent){
  return referring_expression == 'that' ? true :
  referring_expression == "dog" ? true :
  referring_expression == referent.kind
}

// compute meaning of predicate
var meaning_predication = function(adj, property_val, threshold){
  return adj == "big" ? property_val > threshold :
  adj == "small" ? property_val < threshold :
  true
}

var meaningFn = function(utt, state, threshold, adj) {
  // assume subject contributes to reference, predicate to predication
  var RefTruthVal = meaning_reference(utt.subject, state.referent)
  var PredTruthVal = meaning_predication(adj, state.property, threshold)
  return RefTruthVal && PredTruthVal
}

var UtterancePrior = cache(function(form, subordinate_label){
  Infer({model: function(){
    var adj = form == "positive" ? "big" : "small"
// the noun can appear either in the subject or in the predicate
    var noun_position = uniformDraw(['subject', 'predicate'])
    // the noun can be either the sub or the basic target label
    var noun_label = uniformDraw([subordinate_label, "dog"])

    var subject = noun_position == "subject" ? noun_label : "that"
    var predicate = noun_position == "subject" ? adj : adj + " " + noun_label
    return {subject, predicate}
  }})
})


// one joint L0, who computes the literal meaning of an utterance given a specific
// context, utterance and comparison class intended by the speaker

// IMPORTANT: the comparison class is not mapped deterministically to the predicate N
// the listener is uncertain whether the N is the comparison class or whether it is the CC passed from S1
// this allows to integrate the influence of the inferred CC variable value into predicate N sentences
var listener0 = function(utt, cc, context) {
  Infer({
    method: "enumerate",
    model: function() {
      // assume subject contributes to reference, predicate *probabilistically*
      // contributes to predication

      // check if predicate contains the comparison class
      var splitPred = utt['predicate'].split(" ");
      var npInPredicate = splitPred.length > 1;

      // add a soft constraint on whether the predicate N is the CC instead of hard-coding
      // for p > 0.5 in the flip(), the size distribution inferred by L1 from predicate-N sentences is tighter around N = CC
      var comparisonClass = npInPredicate ? flip(0.5) ? splitPred[1] : cc : cc
      // sample state
      var state = sample(statePriorL0(comparisonClass, context))
      // move threshold inference to L0
      var threshold = sample(thresholdPrior("positive"))

      // get the meaning of the utterance for sampled state
      var m = meaningFn(utt, state, threshold, splitPred[0])
      condition(m)

      return {kind: state.referent.kind, id: state.referent.id, property: state.property}
    }
  })
}

// display("That great dane is big, cc = greatdane")
// viz.marginals(listener0(
//   {subject: "that", predicate: "big dog"},
//   "greatdane", // if no NP in predicate?
//   context["dog"]
// ))
// display("That great dane is big, cc = dog")
// viz.marginals(listener0(
//   {subject: "that", predicate: "big dog"},
//   "dog", // if no NP in predicate?
//   context["dog"]
// ))

// display("That great dane is big, cc = greatdane")
// viz.marginals(listener0(
//   {subject: "greatdane", predicate: "big"},
//   "greatdane", // if no NP in predicate?
//   context["dog"]
// ))
// display("That great dane is big, cc = dog")
// viz.marginals(listener0(
//   {subject: "greatdane", predicate: "big"},
//   "dog", // if no NP in predicate?
//   context["dog"]
// ))

// in this model, the comparison class to be communicated is a *choice* made
// by S1, given the target property she wants to bring across,
// as opposed to CC being a listed variable passed from L1.
// That is, the speaker *chooses* the bare adjective to mean either "big for a dog" or "big for a great dane"

// the advantage of this approach is that it eliminates unintuitive predictions where
// the speaker chooses to say "That's a big Great Dane" more often when she intends
// the basic-level relative to the subordinate CC
// The speaker is assumed to maximize the basic utility of the utterance communicating the
// joint state (referent and its property)
var speaker1 = function(state, form, context, priorOnly){
  Infer({
    method: "enumerate",
    model: function() {
      var cc = uniformDraw([state.kind, "dog"]);
      var utterance = sample(UtterancePrior(form, state.kind))
      var jL0 = listener0(utterance, cc, context)

      var full_utility = jL0.score({kind: state.kind, id: state.id, property: state.property})
      // speaker optimality arbitrarily set to 3
      factor(priorOnly == "runPriorOnly" ? 0 : 3*full_utility)
      // return the utterance and the CC
      return {utterance, cc}
    }
  })
}

// display("normal-sized great dane, basic context, speaker prior")
//   viz.table(speaker1(
//     {kind: 'greatdane', id: "gd1", property: 1},
//     "positive",
//     context['dog'],
//     "runPriorOnly"))

// display("normal-sized great dane, basic context, speaker choices")
//   viz.table(speaker1(
//     {kind: 'greatdane', id: "gd1", property: 1},
//     "positive",
//     context['dog'],
//     false))


// display("large-sized great dane, basic context, speaker choices:")
//   viz.table(speaker1(
//     {kind: 'greatdane', id: "gd1", property: 1.7},
//     "positive",
//     context['dog'],
//     false))

// the pragmatic listener model is then built following the lexical enrichment
// model (problang.org)
// the speaker does not know anything about the target referent: it can be any referent from context
// its property is sampled according to the respective subordinate category
var pragmaticListener = function(utterance, form, cont) {
  Infer({
    method: "enumerate",
    model: function(){
      var currentContext = context[cont]
      // L1 doesn't know the referent and its size
      var state = sample(statePriorL1( currentContext))

// uncertainty about the comparison class (basic vs. sub category of the sampled referent)
      var cc = uniformDraw([state.referent, "dog"])
      var state_obj = {kind: state.referent, id: state.id, property: state.property}

      var S1 = speaker1(state_obj, form, currentContext, false);
      // compared the CC the listener is uncertain about to the CC the speaker decided on,
      // following the lexical enrichment model from problang
      factor(S1.score({utterance, cc}));

      return { comparisonClass: cc, referent: state.referent, property: state.property}

    }})
}

// display("That greatdane is big")
// viz.marginals(pragmaticListener(
//   {subject: "greatdane", predicate: "big"},
//   "positive",
//   "dog"))

// display("That's a big greatdane")
// viz.marginals(pragmaticListener(
//   {subject: "that", predicate: "big greatdane"},
//   "positive",
//   "dog"))

// display("That dog is big")
// viz.marginals(pragmaticListener(
//   {subject: "dog", predicate: "big"},
//   "positive",
//   "dog"))

// display("That's a big dog")
// viz.marginals(pragmaticListener(
//   {subject: "that", predicate: "big dog"},
//   "positive",
//   "dog"))

// display("subordinate context")
// display("That dog is big")
// viz.marginals(pragmaticListener(
//   {subject: "dog", predicate: "big"},
//   "positive",
//   "greatdane"))

// display("That's a big dog")
// viz.marginals(pragmaticListener(
//   {subject: "that", predicate: "big dog"},
//   "positive",
//   "greatdane"))


// plot marginal distribution over inferred proportion of basic comparison classes in basic context
var conditions = [
  {utt: {subject: "greatdane", predicate: "big"}, form: "positive", context: "dog", text: "That Great Dane is big", noun: "greatdane"},
  {utt: {subject: "that", predicate: "big greatdane"}, form: "positive", context: "dog", text: "That's a big Great Dane", noun: "greatdane"},
  {utt: {subject: "dog", predicate: "big"}, form: "positive", context: "dog", text: "That dog is big", noun: "dog"},
  {utt: {subject: "that", predicate: "big dog"}, form: "positive", context: "dog", text: "That's a big dog", noun: "dog"}
]

var L1predictions = map(function(stim){
  var L1posterior = pragmaticListener(stim.utt, stim.form, stim.context)
  return {
    utterance: stim.text,
    "P(superordinate comparison class)": exp(marginalize(L1posterior, "comparisonClass").score("dog"))
  }
}, conditions)

 viz.bar(L1predictions)

// plot marginal distribution over inferred proportion of basic comparison classes in subordinate context
var conditions_sub = [
  {utt: {subject: "greatdane", predicate: "big"}, form: "positive", context: "greatdane", text: "That Great Dane is big", noun: "greatdane"},
  {utt: {subject: "that", predicate: "big greatdane"}, form: "positive", context: "greatdane", text: "That's a big Great Dane", noun: "greatdane"},
  {utt: {subject: "dog", predicate: "big"}, form: "positive", context: "greatdane", text: "That dog is big", noun: "dog"},
  {utt: {subject: "that", predicate: "big dog"}, form: "positive", context: "greatdane", text: "That's a big dog", noun: "dog"}
]

var L1predictions_sub = map(function(stim){
  var L1posterior = pragmaticListener(stim.utt, stim.form, stim.context)
  return {
    utterance: stim.text,
    "P(superordinate comparison class)": exp(marginalize(L1posterior, "comparisonClass").score("dog"))
  }
}, conditions_sub)

 viz.bar(L1predictions_sub)
