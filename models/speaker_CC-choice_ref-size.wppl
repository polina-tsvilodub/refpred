var exp = function(x){return Math.exp(x)}

// // for discretization

var binParam = 3;

var round = function(x){
  return Math.round(x*10)/10
}

// introduce parameters for three possible subordinate and a basic category
var stateParams = {
  greatdane: {mu: 1, sigma: 1},
  labrador: {mu: 0, sigma: 1},
  chihuahua: {mu: -1, sigma: 1},
  dog: {mu: 0, sigma: 1}
};

// rangle of possible sizes
var stateVals = [-2,-1.7,-1.3,-1,-0.7,-0.3,0,0.3,0.7,1,1.3,1.7,2]


//     map(
//   round,
//   _.range(stateParams.dog.mu - 3 * stateParams.dog.sigma,
//           stateParams.dog.mu + 3 * stateParams.dog.sigma + stateParams.dog.sigma/binParam,
//           stateParams.dog.sigma/binParam)
// );

// probabilitites of possible sizes depending on cc
var stateProbs = cache(function(cc) {
  return map(function(s){
    exp(Gaussian(stateParams[cc]).score(s))+
      Number.EPSILON
  }, stateVals)
});


// generate the uniform threshold prior
var thresholdBins ={
  positive: map(function(x){
    return  x - (1/(binParam*2));
  }, sort(stateVals)),
  negative: map(function(x){
    return  x + (1/(binParam*2));
  }, sort(stateVals))
};

var thresholdPrior = cache(function(form){
  return Infer({
    model: function() { return uniformDraw(thresholdBins[form]) }
  });
});

// a size prior for L1 for easier threshold generation
var sizePrior = function(cc) {
  Categorical({vs: stateVals, ps: stateProbs(cc)})
}
///

// joint state prior: the referent is sampled from the union of the context & the target
// this allows to compute how informative an N is in order to refer to a target in the given context
// their sizes are sampled from a distribution set by the subordinate comparison class
// corresponding the sampled referent or the passed CC

// the statePrior is different for L1 and L0:
// while L1 knows the subordinate category of a referent he sampled (and the size is sampled from respective subordinate category)
// L0 samples the size according to the CC passed (which can be sub OR super)

var statePriorL1 = function(context) {
  Infer({
    model: function() {
//       var cont = _.union(context, [target]);
//       var ref = uniformDraw(context);
      var ref = categorical({vs: context, ps: [1,1,1,1,1,1]});
      // account for the L0 / L1 distinction
      var size = categorical({vs: stateVals, ps: stateProbs(ref["kind"])});
      return {
        referent: ref["kind"],
        id: ref["id"],
        property: size
      }
    }
  })
};
// L0 state prior, relying on the passed CC only
// aslo used for threshold sampling
var statePriorL0 = function(cc, cont) {
//   display(cc)
  Infer({
    model: function() {
      //       var cont = _.union(context, [target]);
//       display(cc)
      var ref = uniformDraw(cont);
      var size = categorical({vs: stateVals, ps: stateProbs(cc)});
      //       var size = categorical({vs: stateVals, ps: stateProbs(ref.kind)});
      return {
        referent: ref,
        property: size
      }
    }
  })
};



var context = {
  // basic-level context, with a 2 members from three different subordinate categories
  dog: [
    {kind: "greatdane", id: "gd1"},
    {kind: "greatdane", id: "gd2"},
    {kind: "labrador", id: "lb1"},
    {kind: "labrador", id: "lb2"},
    {kind: "chihuahua", id : "ch1"},
    {kind: "chihuahua", id: "ch2"}
  ],
  greatdane: [
    {kind: "greatdane", id: "gd1a"},
    {kind: "greatdane", id: "gd2a"},
    {kind: "greatdane", id: "gd3"},
    {kind: "greatdane", id: "gd4"},
    {kind: "greatdane", id: "gd5"},
    {kind: "greatdane", id: "gd6"}
  ]
}


var meaning_reference = function(referring_expression, referent){
  return referring_expression == 'that' ? true :
  referring_expression == "dog" ? true :
  referring_expression == referent.kind
}

var meaning_predication = function(adj, property_val, threshold){
  //   display(adj)
  //   display(property_val + " " + threshold)
  return adj == "big" ? property_val > threshold :
  adj == "small" ? property_val < threshold :
  true
}

var meaningFn = function(utt, state, threshold, adj) {
  //   display(JSON.stringify(utt))
  //   display(JSON.stringify(state))
  //   display(threshold)
  //   display(adj)
  // assume subject contributes to reference, predicate to predication
  var RefTruthVal = meaning_reference(utt.subject, state.referent)
  var PredTruthVal = meaning_predication(adj, state.property, threshold)
  return RefTruthVal && PredTruthVal
}

var UtterancePrior = cache(function(form, subordinate_label){
  Infer({model: function(){
    //     var adj = uniformDraw([form == "positive" ? "big" : "small", "silence"])
    var adj = form == "positive" ? "big" : "small"

    var noun_position = uniformDraw(['subject', 'predicate'])
    var noun_label = uniformDraw([subordinate_label, "dog"])

    var subject = noun_position == "subject" ? noun_label : "that"
    var predicate = noun_position == "subject" ? adj : adj + " " + noun_label//uniformDraw([subordinate_label, "dog", cc])

    return {subject, predicate}
  }})
})


// one joint L0, who computes the literal meaning of an utterance given a specific QUD,
// and a context, a target, a CC and a threshold
// var listener0 = function(utt, context, target, cc, threshold, qud) {
// var listener0 = function(utt, context, cc, threshold, qud) {
var listener0 = function(utt, cc, context) {
  Infer({
    method: "enumerate",
    model: function() {
      // assume subject contributes to reference, predicate to predication
      // check if predicate contains the comparison class
      var splitPred = utt['predicate'].split(" ");
      var npInPredicate = splitPred.length > 1;
//             display(JSON.stringify(utt))
      // soft constraint on N in pred == CC
      // for p > 0.5, the size distribution inferred by L1 from pred-N sentences is tighter around N = CC
      var comparisonClass = npInPredicate ? flip(0.5) ? splitPred[1] : cc : cc //uniformDraw([cc, splitPred[1]]) : cc
//             display(comparisonClass)
      //       display(context)
      //       display(target)
      var state = sample(statePriorL0(comparisonClass, context))
//       display(JSON.stringify(state))
      var threshold = sample(thresholdPrior("positive"))


      // get the meaning of the utterance for sampled state
      var m = meaningFn(utt, state, threshold, splitPred[0])
      condition(m)
      //       return {referent: state.referent, qudAnswer: qudAnswer, cc: c} //
      return {kind: state.referent.kind, id: state.referent.id, property: state.property} //{qudVal: qudVal}//, cc: c} //
    }
  })
}
// viz.marginals(listener0(
// //   {subject: "greatdane", predicate: "big"},
//   {subject: "that", predicate: "big greatdane"},
//   "dog", // if no NP in predicate?
//   context["dog"]
// ))

// viz.marginals(listener0(
//   {subject: "greatdane", predicate: "big"},
// //   {subject: "that", predicate: "big greatdane"},
//   "dog", // if no NP in predicate?
//   context["dog"]
// ))



// var speaker1 = function(state, cc, form, context, qud, priorOnly){
var speaker1 = function(state, form, context, ref_utility_weight, priorOnly){
  Infer({
    method: "enumerate",
    model: function() {
      var cc = uniformDraw([state.kind, "dog"]);
      var utterance = sample(UtterancePrior(form, state.kind))
//       display('before l0')
      var jL0 = listener0(utterance, cc, context)
//       display('after l0')

//       var L0_ref = marginalize(jL0, "id")
//       var L0_pred = marginalize(jL0, "property")

//       var ref_utility = L0_ref.score(state.id)
//       var pred_utility = L0_pred.score(state.property)
//       var full_utility = ref_utility_weight * ref_utility +
//           (1 - ref_utility_weight) * pred_utility
      var full_utility = jL0.score({kind: state.kind, id: state.id, property: state.property})
      factor(priorOnly == "runPriorOnly" ? 0 : 3*full_utility)

      return {utterance, cc}
    }
  })
}


var pragmaticListener = function(utterance, target_kind, form, cont, ref_utility_weight) {
  // target is the referent in the expt, just for easier representation
  // it is just pooled with the context, it could also be represented directly as part of the context set
  Infer({
        method: "enumerate",
    model: function(){
      // uncertainty about the comparison class (super vs. sub)
      var cc = uniformDraw([target_kind, "dog"])
      print(cc)
      var currentContext = context[cont]
      // L1 doesn't know the referent and its size
//       display(target_kind)
      var state = sample(statePriorL1( currentContext))
      var state_obj = {kind: state.referent, id: state.id, property: state.property}
//             display('before s1')
//       display(state_obj)
      var S1 = speaker1(state_obj, form, currentContext, ref_utility_weight, false);
//             display('after s1')

//           print(S1)
//           display(S1.score({utterance, cc}))
      factor(S1.score({utterance, cc}));
      return { comparisonClass: cc, referent: state.referent, property: state.property}
//       return { comparisonClass: c, referent: state.referent, property: state.property}

    }})
}

// display(speaker1(
//     {kind: 'greatdane', id: "gd1", property: 1},
// //     "dog",
//     "positive",
//     context['dog'],
//     0.5, false).score({{subject: "greatdane", predicate: "big"}, "dog"}))

display("That greatdane is big")
viz.marginals(pragmaticListener(
  {subject: "greatdane", predicate: "big"},
  "greatdane",
  "positive",
  "dog",
  0.5), "comparisonClass")

display("that's a big greatdane")
viz.marginals(pragmaticListener(
  {subject: "that", predicate: "big greatdane"},
  "greatdane",
  "positive",
  "dog",
  0.5))

// display("That dog is big")
// viz.marginals(pragmaticListener(
//   {subject: "dog", predicate: "big"},
//   "greatdane",
//   "positive",
//   "dog",
//   0.5))

// display("that's a big dog")
// viz.marginals(pragmaticListener(
//   {subject: "that", predicate: "big dog"},
//   "greatdane",
//   "positive",
//   "dog",
//   0.5))

// display("sub context")
// viz.marginals(pragmaticListener(
//   {subject: "greatdane", predicate: "big"},
//   "greatdane",
//   "positive",
//   "greatdane",
//   0.5))
// viz.marginals(pragmaticListener(
//   {subject: "that", predicate: "big greatdane"},
//   "greatdane",
//   "positive",
//   "greatdane",
//   0.5))


  // viz.marginals(pragmaticListener(
  //   {subject: "greatdane", predicate: "big"},
  //   "greatdane",
  //   "positive",
  //   "dog",
  //   0.5))
  //
  // viz.marginals(pragmaticListener(
  //   {subject: "that", predicate: "big greatdane"},
  //   "greatdane",
  //   "positive",
  //   "dog",
  //   0.5))
  //


//   display("speaker prior")
//   viz.table(speaker1(
//     {kind: 'greatdane', id: "gd1", property: 1},
// //     "dog",
//     "positive",
//     context['dog'],
//     0.5,
//     "runPriorOnly"))

//   //
// //   display("normal-sized great dane; reference goal")


//   viz.table(speaker1(
//     {kind: 'greatdane', id: "gd1", property: 1},
// //     "dog",
//     "positive",
//     context['dog'],
//     1,
//     false))

// //   display("normal-sized great dane; predication goal")

//   viz.table(speaker1(
//     {kind: 'greatdane', id: "gd1", property: 1.7},
// //     "dog",
//     "positive",
//     context['dog'],
//     0,
//     false))

//   display("normal-sized great dane; refpred goal 50% mixture")


//   viz.table(speaker1(
//     {kind: 'greatdane', id: "gd1", property: 1},
//     "dog",
//     "positive",
//     context['dog'],
//     0.5,
//     false))


//   viz.table(speaker1(
//     {kind: 'greatdane', id: "gd1", property: 1},
//     "greatdane",
//     "positive",
//     context['dog'],
//     0.5,
//     false))

//   //
//   //
//   // display("large-sized great dane; reference goal")
//   //
//   viz.table(speaker1(
//     {kind: 'greatdane', id: "gd1", property: 1.3},
//     "greatdane",
//     "positive",
//     context['dog'],
//     0.5,
//     false))
  //
  // display("large-sized great dane; predication goal")
  //
