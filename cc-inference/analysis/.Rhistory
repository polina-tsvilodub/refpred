knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyboot)
# read in data
d <- read_csv('./../data/results_7_exp1-replica_10.csv')
#first look at the data
glimpse(d)
# comments
d_comments <- d %>%
distinct(submission_id, problems, comments, fairprice)
# number of big / small targets per condition
d %>% group_by(condition, size) %>% count()
# make sure how participants indicate their native language
# sometimes participants use only "en" or "eng" for english
# excluded non-native speakers
d %>% distinct(d$languages) %>% View()
d_filt <- d %>%
filter(grepl("English", languages, ignore.case = T)) %>%
select(submission_id, trial_name, trial_number, size, item, botresponse, response, condition,  picture) %>% mutate(size=factor(size), syntax = factor(condition))
glimpse(d_filt)
# exclude participants if necessary based on botcaptcha
d_filt %>% distinct(d_filt$botresponse) %>% View()
# extract main trials
d_main <- d_filt %>% filter((trial_name =="main1")|(trial_name=="main2")) %>%
select(submission_id, trial_number, response,  size, item, syntax, picture)
# question1 and question2 are the sentence parts coded in the experiment
# look at the different responses provided and categorize them
d_main %>% distinct(d_main$response) %>% View()
# exclude if responses are not referring to the target
d_main_valid <- subset(d_main, !(response %in% c("small")))
d_main_responseCat <- d_main_valid %>%
rowwise() %>%
mutate( # categorize responses
response_cat =
ifelse(
tolower(response) %in% c("bird", "dog", "fish", "flower",  "tree"), "super", "sub"),
resp_cat = ifelse(response_cat == "sub", 1, 0),
response_label = "sub"
)
d_main_responseCat %>% mutate(condition = factor(syntax,
levels = c("prenominal", "predicative"),
labels= c("That's a big X", "That X is big"))) %>% ggplot(aes(x=response_cat)) +geom_bar(position=position_dodge()) + facet_wrap(~syntax)
d_main_summary <- d_main_responseCat %>%
group_by(syntax, response_label) %>%
tidyboot_mean(column = resp_cat) %>% # calculate proportion of subordinate labels in the different conditions
ungroup() %>%
mutate(condition = factor(syntax,
levels = c("prenominal", "predicative"),
labels= c("That's a big X", "That X is big"))
)
ggplot(d_main_summary, aes(x = syntax, fill = syntax,
y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge(0.8))+
geom_linerange(position = position_dodge(0.8))+
labs( y = "Proportion subordinate responses")+
scale_y_continuous(limits = c(0, 1), breaks = c(0, 0.5, 1))+
ggtitle("The proportion of subordinate responses by syntactic condition")
# facet_wrap(~condition)
library(brms)
# effect coding
contrasts(d_main_responseCat$syntax)=contr.sum(2)
# fit regression model
lm.bayes <- brm(resp_cat ~ syntax + (1| submission_id) + (1 + syntax|picture), data = d_main_responseCat, family = "bernoulli")
summary(lm.bayes)
#extract posterior samples
pos_samples <- posterior_samples(lm.bayes)
head(pos_samples)
# test hypothesis: is the sub response proportion credibly greater in the predicative condition?
mean(pos_samples$b_Intercept-pos_samples$b_condition1 > 0)
project.path <- "/Users/mht/projects/comparison-class/"
data.path <- paste(project.path,
"data/pilot-classElicitation-free-3/", sep = "")
knitr::opts_chunk$set(fig.width=3, fig.height=3, fig.crop=F, fig.pos="tb", fig.path='figs/', echo=F, warning=F, cache=F, message=F, sanitize=T)
library(tidyverse)
library(tidytext)
d.tidy.wordCounts <- d.tidy %>%
group_by(adj_positiveness, np_positiveness, adj, np) %>%
count(word)
d.tidy <- d1 %>%
mutate(response = as.character(response),
response = gsub("&quotechar", "", response),
response = gsub("biking", "bike", response),
response = gsub("car ride", "drive", response)
) %>%
unnest_tokens(word, response)  %>%
anti_join(stop_words)  # remove stop words
install.packages("tidytext")
project.path <- "/Users/mht/projects/comparison-class/"
data.path <- paste(project.path,
"data/pilot-classElicitation-free-3/", sep = "")
knitr::opts_chunk$set(fig.width=3, fig.height=3, fig.crop=F, fig.pos="tb", fig.path='figs/', echo=F, warning=F, cache=F, message=F, sanitize=T)
library(tidyverse)
library(tidytext)
library(knitr)
library(tidyboot)
library(ggthemes)
theme_set(theme_few())
#setDict("/Users/mht/Documents/research/tools/WordNet-3.0/dict")
#library(wordnet)
d.subject <- read.csv(paste(data.path, "class-elicitation-free-3-subject_information.csv", sep = ""))
d1 <- read.csv("./../data/class-elicitation-free-3-trials.csv", sep = "") %>%
filter(workerid %in% workers.pass.memory)
d1 <- read_csv("./../data/class-elicitation-free-3-trials.csv", sep = "") %>%
filter(workerid %in% workers.pass.memory)
d1 <- read_csv("./../data/class-elicitation-free-3-trials.csv") %>%
filter(workerid %in% workers.pass.memory)
d1 <- read_csv("./../data/pilot-classElicitation-free-3/class-elicitation-free-3-trials.csv") %>%
filter(workerid %in% workers.pass.memory)
d1 <- read.csv(paste(data.path, "class-elicitation-free-3-trials.csv", sep = "")) %>%
filter(workerid %in% workers.pass.memory)
d1 <- read.csv( "./../data/pilot-classElicitation-free-3/class-elicitation-free-3-trials.csv") %>%
filter(workerid %in% workers.pass.memory)
d1 <- read.csv( "./../data/pilot-classElicitation-free-3/class-elicitation-free-3-trials.csv")
d1
View(d1)
d.counts <- d1 %>%
group_by(np, adj, response) %>%
count(response)
d.counts[with(d.counts, order(np, adj, response, -n)),] %>%
kable()
my_stop_words <-# bind_rows(
stop_words %>%
filter(!(word %in% c("rooms", "year")))#,
# data.frame(
#   word = c("relative", "compare"),
#   lexicon = 'mh'
# )
#)
d.tidy <- d1 %>%
mutate(response = as.character(response),
response = gsub("&quotechar", "", response),
response = gsub("biking", "bike", response),
response = gsub("car ride", "drive", response)
) %>%
unnest_tokens(word, response)  %>%
anti_join(stop_words)  # remove stop words
#anti_join(my_stop_words)  # remove stop words
stop_words
d.tidy <- d1 %>%
mutate(response = as.character(response),
response = gsub("&quotechar", "", response),
response = gsub("biking", "bike", response),
response = gsub("car ride", "drive", response)
) %>%
unnest_tokens(word, response)  %>%
anti_join(stop_words)  # remove stop words
d.tidy.wordCounts <- d.tidy %>%
group_by(adj_positiveness, np_positiveness, adj, np) %>%
count(word)
d.tidy.wordCounts[with(d.tidy.wordCounts,
order(adj, np_positiveness, np, -n)),] %>%
kable()
d.tidy.phrase <- d.tidy %>%
group_by(workerid, trial_num) %>% # next four functions are to put phrases back together again
mutate(wordNumber = paste("word_", row_number(), sep = "")) %>%
spread(wordNumber, word) %>%
unite(phrase, starts_with("word_"), sep = " ") %>%
mutate(phrase = gsub(" NA", "", phrase))
View(d.tidy.phrase)
d.tidy.phrase.w.original <- left_join(d.tidy.phrase,
d1 %>% select(workerid, trial_num, response)) %>%
rename(cleanedPhrase = phrase, originalResponse = response)
d.tidy.phrase.w.original %>%
ungroup() %>%
select(np, adj, originalResponse, cleanedPhrase) %>%
sample_n(40) %>% kable()
d.tidy.phraseCounts <- d.tidy.phrase %>%
group_by(adj_positiveness, np_positiveness, adj, np) %>%
count(phrase) %>%
filter(!is.na(phrase))
d.tidy.phraseCounts[with(d.tidy.phraseCounts,
order(adj, np_positiveness, np, -n)),] %>%
kable()
containsString <- function(strng, substrng){
return(ifelse(length(strsplit(strng, substrng)[[1]]) > 1, 1, 0))
}
d.tidy.phrase.specificMarking <- d.tidy.phrase.w.original %>%
rowwise() %>%
mutate(
cleanedPhrase = paste("_", as.character(cleanedPhrase), "_", sep = ""), # add buffer to allow for split to occur at beginning or end
np = as.character(np),
np = gsub('\"', "", np),
specific = containsString(
as.character(cleanedPhrase),
as.character(np)
)
)
View(d.tidy.phrase.specificMarking)
with(d.tidy.phrase.specificMarking, table(specific))
d.tidy.phrase.specificMarking.bs <- d.tidy.phrase.specificMarking %>%
mutate() %>%
group_by(np_positiveness,  adj_positiveness) %>%
tidyboot_mean(column = specific)
d.tidy.phrase.specificMarking.bs %>%
ungroup() %>%
mutate(np_positiveness = gsub('\"', "", np_positiveness),
adj_positiveness = gsub('\"', "", adj_positiveness),
np_positiveness = factor(np_positiveness,
levels = c("negative", "neither-nor", "positive"),
labels = c("low", "medium", "high")
)) %>%
rename(adj_polarity = adj_positiveness) %>%
ggplot(.,
aes( x = np_positiveness, y = mean,
ymin = ci_lower, ymax = ci_upper, fill = adj_polarity))+
geom_col(position = position_dodge(0.8), width = 0.8, alpha = 0.7, color = 'white')+
geom_linerange(position = position_dodge(0.8), color = 'white')+
scale_fill_brewer(palette = "Set3")+
theme(axis.text.x = element_text(angle = 45, hjust = 1.0, vjust = 1),
#axis.title.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.line = element_line(colour = "white"))+
theme_black()+
scale_y_continuous(limits = c(0, 1), breaks = c(0, 0.5, 1))+
ylab("Proportion paraphrases that contain NP")+
xlab("Subordinate Category Prior Mean")
d.tidy.phrase.specificMarking.bs <- d.tidy.phrase.specificMarking %>%
mutate() %>%
group_by(np_positiveness,  adj_positiveness) %>%
tidyboot_mean(column = specific)
d.tidy.phrase.specificMarking.bs %>%
ungroup() %>%
mutate(np_positiveness = gsub('\"', "", np_positiveness),
adj_positiveness = gsub('\"', "", adj_positiveness),
np_positiveness = factor(np_positiveness,
levels = c("negative", "neither-nor", "positive"),
labels = c("low", "medium", "high")
)) %>%
rename(adj_polarity = adj_positiveness) %>%
ggplot(.,
aes( x = np_positiveness, y = mean,
ymin = ci_lower, ymax = ci_upper, fill = adj_polarity))+
geom_col(position = position_dodge(0.8), width = 0.8, alpha = 0.7, color = 'white')+
geom_linerange(position = position_dodge(0.8), color = 'white')+
scale_fill_brewer(palette = "Set3")+
theme(axis.text.x = element_text(angle = 45, hjust = 1.0, vjust = 1),
#axis.title.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.line = element_line(colour = "white"))+
# theme_black()+
scale_y_continuous(limits = c(0, 1), breaks = c(0, 0.5, 1))+
ylab("Proportion paraphrases that contain NP")+
xlab("Subordinate Category Prior Mean")
# ggsave("../writing/adj_workshop_2019/figs/freeProd_bars_n81.pdf",
#        width = 5, height = 4)
my_stop_words
View(d.tidy)
d.tidy.wordCounts <- d.tidy %>%
group_by(adj_positiveness, np_positiveness, adj, np) %>%
count(word)
d.tidy.wordCounts[with(d.tidy.wordCounts,
order(adj, np_positiveness, np, -n)),] %>%
kable()
View(d.tidy.phrase.w.original)
with(d.tidy.phrase.specificMarking, table(specific))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyboot)
# read in data
d <- read_csv('./../data/results_7_exp1-replica_10.csv')
#first look at the data
glimpse(d)
# comments
d_comments <- d %>%
distinct(submission_id, problems, comments, fairprice)
# number of big / small targets per condition
d %>% group_by(condition, size) %>% count()
# make sure how participants indicate their native language
# sometimes participants use only "en" or "eng" for english
# excluded non-native speakers
d %>% distinct(d$languages) %>% View()
d_filt <- d %>%
filter(grepl("English", languages, ignore.case = T)) %>%
select(submission_id, trial_name, trial_number, size, item, botresponse, response, condition,  picture) %>% mutate(size=factor(size), syntax = factor(condition))
glimpse(d_filt)
# exclude participants if necessary based on botcaptcha
d_filt %>% distinct(d_filt$botresponse) %>% View()
# extract main trials
d_main <- d_filt %>% filter((trial_name =="main1")|(trial_name=="main2")) %>%
select(submission_id, trial_number, response,  size, item, syntax, picture)
# question1 and question2 are the sentence parts coded in the experiment
# look at the different responses provided and categorize them
d_main %>% distinct(d_main$response) %>% View()
# exclude if responses are not referring to the target
d_main_valid <- subset(d_main, !(response %in% c("small")))
d_main_responseCat <- d_main_valid %>%
rowwise() %>%
mutate( # categorize responses
response_cat =
ifelse(
tolower(response) %in% c("bird", "dog", "fish", "flower",  "tree"), "super", "sub"),
resp_cat = ifelse(response_cat == "sub", 1, 0),
response_label = "sub"
)
d_main_responseCat %>% mutate(condition = factor(syntax,
levels = c("prenominal", "predicative"),
labels= c("That's a big X", "That X is big"))) %>% ggplot(aes(x=response_cat)) +geom_bar(position=position_dodge()) + facet_wrap(~syntax)
d_main_summary <- d_main_responseCat %>%
group_by(syntax, response_label) %>%
tidyboot_mean(column = resp_cat) %>% # calculate proportion of subordinate labels in the different conditions
ungroup() %>%
mutate(condition = factor(syntax,
levels = c("prenominal", "predicative"),
labels= c("That's a big X", "That X is big"))
)
ggplot(d_main_summary, aes(x = syntax, fill = syntax,
y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge(0.8))+
geom_linerange(position = position_dodge(0.8))+
labs( y = "Proportion subordinate responses")+
scale_y_continuous(limits = c(0, 1), breaks = c(0, 0.5, 1))+
ggtitle("The proportion of subordinate responses by syntactic condition")
# facet_wrap(~condition)
summary(lm.bayes)
# test hypothesis: is the sub response proportion credibly greater in the predicative condition?
mean(pos_samples$b_Intercept-pos_samples$b_condition1 > 0)
#extract posterior samples
pos_samples <- posterior_samples(lm.bayes)
library(brms)
summary(lm.bayes)
contrasts(d_main_responseCat$syntax
=
contrasts(d_main_responseCat$syntax)
contr.treatment(2)
contr.treatment(3)
str(contr.treatment(3))
matrix(c(-1, 1))
contrasts(d_main_responseCat$syntax)=matrix(c(-1, 1))
contrasts(d_main_responseCat$syntax)
# fit regression model
lm.bayes <- brm(resp_cat ~ syntax + (1| submission_id) + (1 + syntax|picture), data = d_main_responseCat, family = "bernoulli", iter = 500)
summary(lm.bayes)
contrasts(d_main_responseCat$syntax)
#extract posterior samples
pos_samples <- posterior_samples(lm.bayes)
# test hypothesis: is the sub response proportion credibly greater in the predicative condition?
mean(pos_samples$b_syntax1 > 0)
setwd("~/Internship/comp-class-inference/analysis")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyboot)
library(brms)
d <- read_csv("../data/results_9_comp-class-inference-pilot.csv")
glimpse(d)
d <- read_csv("../data/results_9_comp-class-inference-pilot.csv")
glimpse(d)
d_main <- d %>% filter((trial_name == "main1")||(trial_name == "main2"))
d$trial_name
d_main <- d %>% filter((trial_name == "custom_main_text1")||(trial_name == "ustom_main_text2"))
d_main <- d %>% filter((trial_name == "custom_main_text1")|(trial_name == "ustom_main_text2"))
d_main <- d %>% filter((trial_name == "custom_main_text1")|(trial_name == "custom_main_text2"))
d$languages %>% distinct()
d %>% distinct(d$languages) %>% View()
d %>% distinct(d$languages)# %>% View()
d_filt <- d %>%
filter(grepl("English", languages, ignore.case = T))
d_main <- d_filt %>% filter((trial_name == "custom_main_text1")|(trial_name == "custom_main_text2")) %>% select(submission_id, trial_number, ref_spec, pic_spec, item, response, context)
d_main %>% distinct(d_main%response) %>% View()
d_main %>% distinct(d_main%response) %>% View()
d_main %>% distinct(d_main$response) %>% View()
d_main %>% distinct(d_main$response) %>% View()
d_main_valid <- subset(d_main, !(response %in% c("Yes", "That one is big", "That chihuahua is small", "That great dane is big")))
d_main_responseCat <- d_main_valid %>%
rowwise() %>%
mutate( # categorize responses
response_cat =
ifelse(
tolower(response) %in% c("birds", "dogs", "fish", "flowers",  "trees"), "basic", "sub"),
response_num = ifelse(response_cat == "sub", 1, 0),
response_label = "sub"
)
d$question1
d$context
d$text
d %>% distinct(d$languages)# %>% View()
d_filt <- d %>%
filter(grepl("English", languages, ignore.case = T))
d_main <- d_filt %>% filter((trial_name == "custom_main_text1")|(trial_name == "custom_main_text2")) %>% select(submission_id, trial_number, ref_spec, pic_spec, item, response, context, text)
d_main %>% distinct(d_main$response) %>% View()
d_main_valid <- subset(d_main, !(response %in% c("Yes", "That one is big", "That chihuahua is small", "That great dane is big")))
d_main_responseCat <- d_main_valid %>%
rowwise() %>%
mutate( # categorize responses
response_cat =
ifelse(
tolower(response) %in% c("birds", "dogs", "fish", "flowers",  "trees"), "basic", "sub"),
response_num = ifelse(response_cat == "sub", 1, 0),
response_label = "sub"
)
d_main_responseCat %>% mutate(condition = ifelse("That's" %in% text, "prenominal", "predicative")) %>% ggplot(aes(x=response_cat)) %>% geom_bar(position=position_dodge()) + facet_wrap(~condition)
d_main_responseCat %>% mutate(condition = ifelse("That's" %in% text, "prenominal", "predicative")) %>% ggplot(aes(x=response_cat)) + geom_bar(position=position_dodge()) + facet_wrap(~condition)
d_main_responseCat %>% rowwise() %>% mutate(condition = ifelse("That's" %in% text, "prenominal", "predicative")) %>% ggplot(aes(x=response_cat)) + geom_bar(position=position_dodge()) + facet_wrap(~condition)
#%>% ggplot(aes(x=response_cat)) + geom_bar(position=position_dodge()) + facet_wrap(~condition)
d_main_responseCat %>% rowwise() %>% mutate(condition = ifelse("That's" %in% text, "prenominal", "predicative")) %>% View()
d_main_responseCat %>% rowwise() %>% mutate(condition = ifelse("That" %in% text, "predicative", "prenominal")) %>% View()
#%>% ggplot(aes(x=response_cat)) + geom_bar(position=position_dodge()) + facet_wrap(~condition)
d_main_responseCat %>% rowwise() %>% mutate(condition = ifelse(("That" %in% text), "predicative", "prenominal")) %>% View()
#%>% ggplot(aes(x=response_cat)) + geom_bar(position=position_dodge()) + facet_wrap(~condition)
d_main_responseCat %>% rowwise() %>% mutate(condition = ifelse(("That" %in% d_main_responseCat$text), "predicative", "prenominal")) %>% View()
#%>% ggplot(aes(x=response_cat)) + geom_bar(position=position_dodge()) + facet_wrap(~condition)
d_main_responseCat %>% rowwise() %>% mutate(condition = factor(text, ifelse(("That" %in% text), "predicative", "prenominal"))) %>% View()
#%>% ggplot(aes(x=response_cat)) + geom_bar(position=position_dodge()) + facet_wrap(~condition)
d_main_responseCat %>% rowwise() %>% mutate(condition = factor(text, ifelse(("That" %in% text), "predicative", "prenominal"), levels = c("predicative", "prenominal"))) %>% View()
#%>% ggplot(aes(x=response_cat)) + geom_bar(position=position_dodge()) + facet_wrap(~condition)
d_main_responseCat %>% rowwise() %>% mutate(condition = ifelse((grepl("That", text)), "predicative", "prenominal")) %>% View()
#%>% ggplot(aes(x=response_cat)) + geom_bar(position=position_dodge()) + facet_wrap(~condition)
d_main_responseCat %>% rowwise() %>% mutate(condition = ifelse((grepl("That's", text)), "prenominal", "predicative")) %>% View()
#%>% ggplot(aes(x=response_cat)) + geom_bar(position=position_dodge()) + facet_wrap(~condition)
d_main_responseCat %>% rowwise() %>% mutate(condition = ifelse((grepl("That's", text)), "prenominal", "predicative")) %>% %>% ggplot(aes(x=response_cat)) + geom_bar(position=position_dodge()) + facet_wrap(~condition)
d_main_responseCat %>% rowwise() %>% mutate(condition = ifelse((grepl("That's", text)), "prenominal", "predicative")) %>% ggplot(aes(x=response_cat)) + geom_bar(position=position_dodge()) + facet_wrap(~condition)
d_main_responseCat %>% rowwise() %>% mutate(condition = ifelse((grepl("That's", text)), "prenominal", "predicative")) %>% ggplot(aes(x=response_cat, fill=ref_spec)) + geom_bar(position=position_dodge()) + facet_wrap(~condition)
d_main_responseCat %>% rowwise() %>% mutate(condition = ifelse((grepl("That's", text)), "prenominal", "predicative")) %>% ggplot(aes(x=response_cat, fill=ref_spec)) + geom_bar(position=position_dodge()) + facet_wrap(~condition)
d_main_cat %>% group_by(response_label, ref_spec, pic_spec) %>% tidyboot_mean(column = response_num) %>% ungroup() %>% ggplot(aes(x=ref_spec, fill= pic_spec, y = mean, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(0.8))+
geom_linerange(position = position_dodge(0.8)) + facet_wrap(~condition)
d_main_valid <- subset(d_main, !(response %in% c("Yes", "That one is big", "That chihuahua is small", "That great dane is big")))
d_main_responseCat <- d_main_valid %>%
rowwise() %>%
mutate( # categorize responses
response_cat =
ifelse(
tolower(response) %in% c("birds", "dogs", "fish", "flowers",  "trees"), "basic", "sub"),
response_num = ifelse(response_cat == "sub", 1, 0),
response_label = "sub"
)
d_main_cat <- d_main_responseCat %>% rowwise() %>% mutate(condition = ifelse((grepl("That's", text)), "prenominal", "predicative"))
d_main_cat %>% group_by(response_label, ref_spec, pic_spec) %>% tidyboot_mean(column = response_num) %>% ungroup() %>% ggplot(aes(x=ref_spec, fill= pic_spec, y = mean, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(0.8))+
geom_linerange(position = position_dodge(0.8)) + facet_wrap(~condition)
d_main_cat %>% group_by(response_label, ref_spec, pic_spec, condition) %>% tidyboot_mean(column = response_num) %>% ungroup() %>% ggplot(aes(x=ref_spec, fill= pic_spec, y = mean, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(0.8))+
geom_linerange(position = position_dodge(0.8)) + facet_wrap(~condition)
d_main_cat %>% group_by(response_label, ref_spec, condition) %>% tidyboot_mean(column = response_num) %>% ungroup() %>% ggplot(aes(x=ref_spec, fill= condition, y = mean, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(0.8))+
geom_linerange(position = position_dodge(0.8))# + facet_wrap(~condition)
d_main_cat %>% group_by(response_label, ref_spec, condition) %>% tidyboot_mean(column = response_num) %>% ungroup() %>% mutate(ref_spec = factor(ref_spec, levels= c(0, 1), labels = c("sub", "one"))) %>% ggplot(aes(x=ref_spec, fill= condition, y = mean, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(0.8))+
geom_linerange(position = position_dodge(0.8))# + facet_wrap(~condition)
d_main_cat %>% group_by(response_label, ref_spec, condition) %>% tidyboot_mean(column = response_num) %>% ungroup() %>% mutate(ref_spec = factor(ref_spec, levels= c(0, 1), labels = c("sub", "one"))) %>% ggplot(aes(x=condition, fill= ref_spec, y = mean, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(0.8))+
geom_linerange(position = position_dodge(0.8))# + facet_wrap(~condition)
d_main_cat %>% group_by(response_label, ref_spec, condition, pic_spec) %>% tidyboot_mean(column = response_num) %>% ungroup() %>%
mutate(ref_spec = factor(ref_spec, levels= c(0, 1), labels = c("sub", "one")),
pic_spec = factor(pic_spec, levels = c(0, 1), labels = c("basic", "sub")) %>% ggplot(aes(x=pic_spec, fill= ref_spec, y = mean, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(0.8))+
geom_linerange(position = position_dodge(0.8)) + facet_wrap(~condition)
d_main_cat %>% group_by(response_label, ref_spec, condition, pic_spec) %>% tidyboot_mean(column = response_num) %>% ungroup() %>%
mutate(ref_spec = factor(ref_spec, levels= c(0, 1), labels = c("sub", "one")),
pic_spec = factor(pic_spec, levels = c(0, 1), labels = c("basic", "sub")) %>% ggplot(aes(x=pic_spec, fill= ref_spec, y = mean, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(0.8))+
geom_linerange(position = position_dodge(0.8)) + facet_wrap(~condition)
d_main_cat %>% group_by(response_label, ref_spec, condition, pic_spec) %>% tidyboot_mean(column = response_num) %>% ungroup() %>%
mutate(ref_spec = factor(ref_spec, levels= c(0, 1), labels = c("sub", "one")),
pic_spec = factor(pic_spec, levels = c(0, 1), labels = c("basic", "sub")) %>% ggplot(aes(x=pic_spec, fill= ref_spec, y = mean, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(0.8))+
geom_linerange(position = position_dodge(0.8)) #+ facet_wrap(~condition)
d_main_cat %>% group_by(response_label, ref_spec,  pic_spec) %>% tidyboot_mean(column = response_num) %>% ungroup() %>%
mutate(ref_spec = factor(ref_spec, levels= c(0, 1), labels = c("sub", "one")),
pic_spec = factor(pic_spec, levels = c(0, 1), labels = c("basic", "sub")) %>% ggplot(aes(x=pic_spec, fill= ref_spec, y = mean, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(0.8))+
geom_linerange(position = position_dodge(0.8)) #+ facet_wrap(~condition)
d_main_cat %>% group_by(response_label, ref_spec, pic_spec) %>% tidyboot_mean(column = response_num) %>% ungroup() %>%
mutate(ref_spec = factor(ref_spec, levels= c(0, 1), labels = c("sub", "one")),
pic_spec = factor(pic_spec, levels = c(0, 1), labels = c("basic", "sub"))) %>% ggplot(aes(x=pic_spec, fill= ref_spec, y = mean, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(0.8))+
geom_linerange(position = position_dodge(0.8)) #+ facet_wrap(~condition)
d_main_cat %>% group_by(response_label, ref_spec, pic_spec, condition) %>% tidyboot_mean(column = response_num) %>% ungroup() %>%
mutate(ref_spec = factor(ref_spec, levels= c(0, 1), labels = c("sub", "one")),
pic_spec = factor(pic_spec, levels = c(0, 1), labels = c("basic", "sub"))) %>% ggplot(aes(x=pic_spec, fill= ref_spec, y = mean, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(0.8))+
geom_linerange(position = position_dodge(0.8)) + facet_wrap(~condition)
library(lme4)
lm.fit <- glmer(response_num ~ condition*ref_spec*pic_spec + (1|submission_id), data =d_main_cat, family = "binomial" )
summary(lm.fit)
d_main_cat %>% group_by(response_label, ref_spec, pic_spec, condition) %>% tidyboot_mean(column = response_num) %>% ungroup() %>%
mutate(ref_spec = factor(ref_spec, levels= c(0, 1), labels = c("sub", "one")),
pic_spec = factor(pic_spec, levels = c(0, 1), labels = c("basic", "sub"))) %>% ggplot(aes(x=pic_spec, fill= ref_spec, y = mean, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(0.8))+
geom_linerange(position = position_dodge(0.8)) + facet_wrap(~condition)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyboot)
# read in data
d <- read_csv('./../data/results_7_exp1-replica_10.csv')
#first look at the data
glimpse(d)
# comments
d_comments <- d %>%
distinct(submission_id, problems, comments, fairprice)
# number of big / small targets per condition
d %>% group_by(condition, size) %>% count()
# make sure how participants indicate their native language
# sometimes participants use only "en" or "eng" for english
# excluded non-native speakers
d %>% distinct(d$languages) %>% View()
d_filt <- d %>%
filter(grepl("English", languages, ignore.case = T)) %>%
select(submission_id, trial_name, trial_number, size, item, botresponse, response, condition,  picture) %>% mutate(size=factor(size), syntax = factor(condition))
glimpse(d_filt)
# exclude participants if necessary based on botcaptcha
d_filt %>% distinct(d_filt$botresponse) %>% View()
# extract main trials
d_main <- d_filt %>% filter((trial_name =="main1")&&(trial_number==1)) %>%
select(submission_id, trial_number, response,  size, item, syntax, picture)
d_main
d_main
# extract main trials
d_main <- d_filt %>% filter((trial_name =="main1")&(trial_number==1)) %>%
select(submission_id, trial_number, response,  size, item, syntax, picture)
d_main
