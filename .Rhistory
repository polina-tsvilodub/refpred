bar.width = 0.8
d_rate_main_full %>%
group_by(NP, syntax) %>%
tidyboot_mean(column = response1) %>%
ggplot(aes(x = NP, y = mean, fill = syntax, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(bar.width),
width = bar.width, alpha = 0.3, color = 'black') +
geom_point(data = d_rating_main_full,
position = position_jitterdodge(),
inherit.aes = F, aes(x = np, y = response1, color = syntax),
alpha = 0.25)+
geom_linerange(position = position_dodge(bar.width))+
xlab("NP position") +
ylab("mean sentence rating") +
ggtitle("Mean ratings by syntactic condition")
setwd("~/Internship/refpred-expts-analysis")
# read the data
d_rate <- read_csv('../data/results.csv')
# read the data
d_rate <- read_csv('./data/results.csv')
d_rate <- d_rate[!(names(d_rate) %in% c("worker_id", "hit_id", "assignment_id"))]
# exclude participants who report difficulties
d_rate %>% select(submission_id, comments, problems) %>% distinct() %>% View()
# d_rate <- subset(d_rate, !(submission_id %in% c(....)))
# exclude data from non-native English speakers and those where the language information is missing
d_rate %>% distinct(languages)
d_rate_filt <- d_rate %>% filter(grepl("en", languages, ignore.case = T))
# warmup trials
d_rate_warmup <- d_rate_filt %>% filter(trial_name == "custom_warmup")
# get IDs of participants who give equal rating of both sentences
d_rate_warmup %>% rowwise() %>% filter(response1 == response2) %>% View()
# subset valid participants
# d_rate_filt <- subset(d_rate_filt, !(submission_id %in% c(....)))
# main trials
d_rate_main <- d_rate_filt %>% filter((trial_name == "custom_slider1") |
(trial_name == "custom_slider2")) %>%
select(submission_id, trial_number, trial_name, NP, syntax, sentence_order, .... )
# turn NP, syntax to factors
d_rate_main <- d_rate_main %>% mutate(NP = factor(NP, levels = c(0, 1),
labels = c("sub", "basic")))
d_rate_main_subj1 <- d_rate_main %>% filter(first_condition == "pred") %>% select(!(response2)) %>% mutate(syntax = "subject")# response1 is for subject NP
d_rate_main_pred1 <- d_rate_main %>% filter(first_condition == "pred") %>% select(!(response1)) %>% mutate(response1 = response2,
syntax = "predicate") # response1 is for predicate NP
d_rate_main_pred2 <- d_rate_main %>% filter(first_condition == "prenom") %>% select(!(response2)) %>% mutate(syntax = "predicate")# response1 is for predicate NP
d_rate_main_subj2 <- d_rate_main %>% filter(first_condition == "prenom") %>% select(!(response1)) %>% mutate(response1 = response2,
syntax = "subject") # change response1 be the rating
# check is there are differences by order of sliders
d_rate_main_full <- rbind(rbind(d_rate_main_subj1, d_rate_main_pred1), rbind(d_rate_main_pred2, d_rate_main_subj2))
d_rate_main_full %>% group_by(sentence_order, syntax) %>% tidyboot_mean(response1)
View(d_rate_filt)
View(d_rate)
# main trials
d_rate_main <- d_rate_filt %>% filter((trial_name == "custom_slider1") |
(trial_name == "custom_slider2")) #%>%
d_rate <- read_csv('./data/results.csv')
d_rate <- d_rate[!(names(d_rate) %in% c("worker_id", "hit_id", "assignment_id"))]
# exclude participants who report difficulties
d_rate %>% select(submission_id, comments, problems) %>% distinct() %>% View()
d_rate_filt <- d_rate %>% filter(grepl("en", languages, ignore.case = T))
# warmup trials
d_rate_warmup <- d_rate %>% filter(trial_name == "custom_warmup")
# warmup trials
d_rate_warmup <- d_rate %>% filter(trial_name == "custom_slider_warmup")
# main trials
d_rate_main <- d_rate %>% filter((trial_name == "custom_slider1") |
(trial_name == "custom_slider2")) #%>%
d_rate_main <- d_rate_main %>% mutate(NP = factor(NP, levels = c(0, 1),
labels = c("sub", "basic")))
d_rate_main_subj1 <- d_rate_main %>% filter(first_condition == "pred") %>% select(!(response2)) %>% mutate(syntax = "subject")# response1 is for subject NP
d_rate_main_pred1 <- d_rate_main %>% filter(first_condition == "pred") %>% select(!(response1)) %>% mutate(response1 = response2,
syntax = "predicate") # response1 is for predicate NP
d_rate_main_pred2 <- d_rate_main %>% filter(first_condition == "prenom") %>% select(!(response2)) %>% mutate(syntax = "predicate")# response1 is for predicate NP
d_rate_main_subj2 <- d_rate_main %>% filter(first_condition == "prenom") %>% select(!(response1)) %>% mutate(response1 = response2,
syntax = "subject") # change response1 be the rating
# check is there are differences by order of sliders
d_rate_main_full <- rbind(rbind(d_rate_main_subj1, d_rate_main_pred1), rbind(d_rate_main_pred2, d_rate_main_subj2))
d_rate_main_full %>% group_by(sentence_order, syntax) %>% tidyboot_mean(response1)
# turn NP, syntax to factors
d_rate_main <- d_rate_main %>% mutate(NP = factor(np, levels = c(0, 1),
labels = c("sub", "basic")))
d_rate_main_subj1 <- d_rate_main %>% filter(first_condition == "pred") %>% select(!(response2)) %>% mutate(syntax = "subject")# response1 is for subject NP
d_rate_main_subj1 <- d_rate_main %>% filter(first_condition == "pred") %>% d_rate_main_subj1[, !(colnames(d_rate_main_subj1)=="response2")] %>%
mutate(syntax = "subject")
d_rate_main_subj1 <- d_rate_main %>% filter(first_condition == "pred") %>% d_rate_main[, !(colnames(d_rate_main)=="response2")] %>%
mutate(syntax = "subject")# response1 is for subject NP
d_rate_main_subj1 <- d_rate_main %>% filter(first_condition == "pred") %>% d_rate_main[, !(names(d_rate_main)=="response2")] %>%
mutate(syntax = "subject")# response1 is for subject NP
d_rate_main_subj1 <- d_rate_main %>% filter(first_condition == "pred") %>% d_rate_main[, !(names(d_rate_main) %in% c("response2"))] %>%
mutate(syntax = "subject")# response1 is for subject NP
d_rate_main_subj1 <- d_rate_main %>% filter(first_condition == "pred") %>% mutate(syntax = "subject")# response1 is for subject NP
d_rate_main_subj1 <- d_rate_main %>% filter(first_condition == "pred") %>% mutate(syntax = "subject")# response1 is for subject NP
d_rate_main_pred1 <- d_rate_main %>% filter(first_condition == "pred") %>% mutate(response1 = response2,
syntax = "predicate") # response1 is for predicate NP
d_rate_main_pred2 <- d_rate_main %>% filter(first_condition == "prenom")  %>% mutate(syntax = "predicate")# response1 is for predicate NP
d_rate_main_subj2 <- d_rate_main %>% filter(first_condition == "prenom")  %>% mutate(response1 = response2,
syntax = "subject") # change response1 be the rating
# check is there are differences by order of sliders
d_rate_main_full <- rbind(rbind(d_rate_main_subj1, d_rate_main_pred1), rbind(d_rate_main_pred2, d_rate_main_subj2))
d_rate_main_full %>% group_by(sentence_order, syntax) %>% tidyboot_mean(response1)
View(d_rate_main_full)
View(df.mode)
df.mode.final <- df.mode %>% select(workerid, degree, superordinate_sg, adj, adj_positiveness, np, mode_np, specific, Frequencies_SG.x, Frequencies_SG.y) %>% mutate(superordinate = superordinate_sg, NP = np,  response = mode_np, subFreq = Frequencies_SG.x, superFreq = Frequencies_SG.y) %>% select(workerid, degree, superordinate, adj, adj_positiveness, NP, response, specific, subFreq, superFreq)
View(df.mode.final)
write_csv(df.mode.final, '../data/pilot-classElicitation-free-4/class-elicitation-free-4-cleaned-data-w-sub.csv')
View(d_rate_main_full)
d_rate_main_full %>% group_by(syntax) %>% tidyboot_mean(response1)
bar.width = 0.8
d_rate_main_full %>%
group_by(NP, syntax) %>%
tidyboot_mean(column = response1) %>%
ggplot(aes(x = NP, y = mean, fill = syntax, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(bar.width),
width = bar.width, alpha = 0.3, color = 'black') +
geom_point(data = d_rating_main_full,
position = position_jitterdodge(),
inherit.aes = F, aes(x = np, y = response1, color = syntax),
alpha = 0.25)+
geom_linerange(position = position_dodge(bar.width))+
xlab("NP position") +
ylab("mean sentence rating") +
ggtitle("Mean ratings by syntactic condition")
d_rate_main_full %>%
group_by(NP, syntax) %>%
tidyboot_mean(column = response1) %>%
ggplot(aes(x = NP, y = mean, fill = syntax, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(bar.width),
width = bar.width, alpha = 0.3, color = 'black') +
geom_point(data = d_rate_main_full,
position = position_jitterdodge(),
inherit.aes = F, aes(x = np, y = response1, color = syntax),
alpha = 0.25)+
geom_linerange(position = position_dodge(bar.width))+
xlab("NP position") +
ylab("mean sentence rating") +
ggtitle("Mean ratings by syntactic condition")
d_rate_main_full %>%
group_by(NP, syntax) %>%
tidyboot_mean(column = response1) %>%
ggplot(aes(x = NP, y = mean, fill = syntax, ymin = ci_lower, ymax = ci_upper)) +
geom_col(position = position_dodge(bar.width),
width = bar.width, alpha = 0.3, color = 'black') +
geom_point(data = d_rate_main_full,
position = position_jitterdodge(),
inherit.aes = F, aes(x = NP, y = response1, color = syntax),
alpha = 0.25)+
geom_linerange(position = position_dodge(bar.width))+
xlab("NP position") +
ylab("mean sentence rating") +
ggtitle("Mean ratings by syntactic condition")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(brms)
library(tidyboot)
library(lmerTest)
library(broom)
#nr_s = 60
# nr of items (lets assume there are only six)
nr_items <- 6
my_norm <- function(n, mu, sd, lower, upper) { x<- rnorm(n, mu, sd); while(any(x<lower | x>upper)) { x <- rnorm(n = n, mean = mu, s = sd) }; return(x)}
nr_s = 50
data_production_50 <-
tibble(syntax     = rep(c("subject", "predicate"), each = nr_s*nr_items)
) %>%
mutate( syntax = factor(syntax, levels = c("subject", "predicate")),
y = ifelse(syntax == "subject",
rbernoulli(nr_s*nr_items, p = 0.7),
rbernoulli(nr_s*nr_items, p = 0.55 )),
Subject = rep(rnorm(2*nr_s, 3, 2), each=nr_items),
Item = rep(rep(rnorm(nr_items, 0, 1), each=nr_s), 2)) %>%
mutate(resp_cat = ifelse( y == T, 1, 0))
# contrast coding
contrasts(data_production$syntax) = matrix(c(-1,1))
# full model
fit_data_production_50 <- glmer(resp_cat ~ syntax + (1 + syntax || Subject) + (1 + syntax || Item),
data = data_production2,
family="binomial")
#brm( resp_cat ~ 0 + syntax + (1 | Subject) ,
#    data = data_production,
#   family = "bernoulli")
summary(fit_data_production_50)
nr_s = 50
data_production_50 <-
tibble(syntax     = rep(c("subject", "predicate"), each = nr_s*nr_items)
) %>%
mutate( syntax = factor(syntax, levels = c("subject", "predicate")),
y = ifelse(syntax == "subject",
rbernoulli(nr_s*nr_items, p = 0.7),
rbernoulli(nr_s*nr_items, p = 0.55 )),
Subject = rep(rnorm(2*nr_s, 3, 2), each=nr_items),
Item = rep(rep(rnorm(nr_items, 0, 1), each=nr_s), 2)) %>%
mutate(resp_cat = ifelse( y == T, 1, 0))
# contrast coding
contrasts(data_production$syntax) = matrix(c(-1,1))
# full model
fit_data_production_50 <- glmer(resp_cat ~ syntax + (1 + syntax || Subject) + (1 + syntax || Item),
data = data_production_50,
family="binomial")
#brm( resp_cat ~ 0 + syntax + (1 | Subject) ,
#    data = data_production,
#   family = "bernoulli")
summary(fit_data_production_50)
#brm( resp_cat ~ 0 + syntax + (1 | Subject) ,
#    data = data_production,
#   family = "bernoulli")
summary(fit_data_production_50)
sim_NP_and_fit <- function(seed, nr_s) {
nr_items = 6
set.seed(seed)
di <-
tibble(syntax     = rep(c("subject", "predicate"), each = nr_s*nr_items),
#Subject <- rep( 1:(nr_s*2), each=nr_items ),
#Item <- rep( 1:nr_items, nr_s*2 )
) %>%
mutate( syntax = factor(syntax, levels = c("subject", "predicate")),
y = ifelse(syntax == "subject",
rbernoulli(nr_s*nr_items, p = 0.7),
rbernoulli(nr_s*nr_items, p = 0.55 )),
Subject = rep(rnorm(2*nr_s, 3, 2), each=nr_items),
Item = rep(rep(rnorm(nr_items, 0, 1), each=nr_s), 2)) %>%
mutate(resp_cat = ifelse( y == T, 1, 0))
# contrast coding
contrasts(data_production$syntax) = matrix(c(-1,1))
update(fit_data_production_50,
newdata = di,
seed = seed) %>%
tidy(prob = .95)
}
s_prod_50_full <-
tibble(seed = 1:100) %>%
mutate(tidy = map(seed, sim_NP_and_fit, n = 50)) %>%
unnest(tidy)
head(s_prod_50_full)
s_prod_50_full %>% filter(term == "syntaxpredicate") %>% mutate( check = ifelse(estimate < 0, 1, 0) ) %>%  mutate(p = ifelse(p.value < 0.05, 1, 0)) %>%
summarise(p = mean(p))
s_prod_50_full %>% filter(term == "syntaxpredicate") %>% mutate( check = ifelse(estimate < 0, 1, 0) ) %>%  mutate(p = ifelse(p.value < 0.01, 1, 0)) %>%
summarise(p = mean(p))
s_prod_50_full %>% filter(term == "syntaxpredicate") %>% mutate( check = ifelse(estimate < 0, 1, 0) ) %>%  mutate(p = ifelse(p.value < 0.001, 1, 0)) %>%
summarise(p = mean(p))
s_prod_50_full %>% filter(term == "syntaxpredicate") %>% mutate( check = ifelse(estimate < 0, 1, 0) ) %>%  mutate(p = ifelse(p.value < 0.005, 1, 0)) %>%
summarise(p = mean(p))
s_prod_50_full %>% filter(term == "syntaxpredicate") %>% mutate( check = ifelse(estimate < 0, 1, 0) ) %>%  mutate(p = ifelse(p.value < 0.01, 1, 0)) %>%
summarise(p = mean(p))
s_prod_50_full %>% filter(term == "syntaxpredicate") %>% mutate( check = ifelse(estimate < 0, 1, 0) ) %>%  mutate(p = ifelse(p.value < 0.005, 1, 0)) %>%
summarise(p = mean(p))
s_prod_50_full %>% filter(term == "syntaxpredicate") %>% mutate( check = ifelse(estimate < 0, 1, 0) ) %>%  mutate(p = ifelse(p.value < 0.008, 1, 0)) %>%
summarise(p = mean(p))
s_prod_50_full %>% filter(term == "syntaxpredicate") %>% mutate( check = ifelse(estimate < 0, 1, 0) ) %>%  mutate(p = ifelse(p.value < 0.006, 1, 0)) %>%
summarise(p = mean(p))
s_prod_50_full %>% filter(term == "syntaxpredicate") %>% mutate( check = ifelse(estimate < 0, 1, 0) ) %>%  mutate(p = ifelse(p.value < 0.005, 1, 0)) %>%
summarise(p = mean(p))
s_prod_50_full %>% filter(term == "syntaxpredicate") %>% mutate( check = ifelse(estimate < 0, 1, 0) ) %>%  mutate(p = ifelse(p.value < 0.0055, 1, 0)) %>%
summarise(p = mean(p))
s_prod_50_full %>% filter(term == "syntaxpredicate") %>% mutate( check = ifelse(estimate < 0, 1, 0) ) %>%  mutate(p = ifelse(p.value < 0.01, 1, 0)) %>%
summarise(p = mean(p))
nr_s=50
# simulate rating data
data_rating_50 <- tibble(
syntax = rep(c("subject", "predicate"), each = nr_s*nr_items),
NP = rep(c("basic", "sub"), nr_s*nr_items)
) %>%
mutate(syntax = factor(syntax, levels=c("subject", "predicate")),
NP = factor(NP, levels=c("basic", "sub")),
rating = ifelse( NP == "sub",
ifelse( syntax == "predicate",
my_norm((nr_s*nr_items)/2, 60, 8, 0, 100),
my_norm((nr_s*nr_items)/2, 80, 8, 0, 100)
),
my_norm(nr_s*nr_items, 83, 8, 0, 100)),
Subject = rep(rnorm(2*nr_s, 3, 2), each=nr_items),
Item = rep(rep(rnorm(nr_items, 1, 1), each=nr_s), 2))
contrasts(data_rating$syntax) = matrix(c(-1, 1))
contrasts(data_rating$NP) = matrix(c(-1,1))
# full model
fit_data_rating_full_50 <- glmer(rating ~ syntax*NP + (syntax*NP || Subject) + (syntax*NP || Item),
data = data_rating_50,
REML = F)
nr_s=50
# simulate rating data
data_rating_50 <- tibble(
syntax = rep(c("subject", "predicate"), each = nr_s*nr_items),
NP = rep(c("basic", "sub"), nr_s*nr_items)
) %>%
mutate(syntax = factor(syntax, levels=c("subject", "predicate")),
NP = factor(NP, levels=c("basic", "sub")),
rating = ifelse( NP == "sub",
ifelse( syntax == "predicate",
my_norm((nr_s*nr_items)/2, 60, 8, 0, 100),
my_norm((nr_s*nr_items)/2, 80, 8, 0, 100)
),
my_norm(nr_s*nr_items, 83, 8, 0, 100)),
Subject = rep(rnorm(2*nr_s, 3, 2), each=nr_items),
Item = rep(rep(rnorm(nr_items, 1, 1), each=nr_s), 2))
contrasts(data_rating_50$syntax) = matrix(c(-1, 1))
contrasts(data_rating_50$NP) = matrix(c(-1,1))
# full model
fit_data_rating_full_50 <- glmer(rating ~ syntax*NP + (syntax*NP || Subject) + (syntax*NP || Item),
data = data_rating_50,
REML = F)
summery(fit_data_rating_full_50)
summary(fit_data_rating_full_50)
nr_s=60
data_rating_60 <- tibble(
syntax = rep(c("subject", "predicate"), each = nr_s*nr_items),
NP = rep(c("basic", "sub"), nr_s*nr_items)
) %>%
mutate(syntax = factor(syntax, levels=c("subject", "predicate")),
NP = factor(NP, levels=c("basic", "sub")),
rating = ifelse( NP == "sub",
ifelse( syntax == "predicate",
my_norm((nr_s*nr_items)/2, 60, 8, 0, 100),
my_norm((nr_s*nr_items)/2, 80, 8, 0, 100)
),
my_norm(nr_s*nr_items, 83, 8, 0, 100)),
Subject = rep(rnorm(2*nr_s, 3, 2), each=nr_items),
Item = rep(rep(rnorm(nr_items, 1, 1), each=nr_s), 2))
contrasts(data_rating_60$syntax) = matrix(c(-1, 1))
contrasts(data_rating_60$NP) = matrix(c(-1,1))
# full model
fit_data_rating_full_60 <- glmer(rating ~ syntax*NP + (syntax*NP || Subject) + (syntax*NP || Item),
data = data_rating_60,
REML = F)
# full model
fit_data_rating_full_60 <- glmer(rating ~ syntax*NP + (syntax*NP || Subject) + (syntax*NP || Item),
data = data_rating_60,
REML = F)
summary(fit_data_rating_full_50)
summary(fit_data_rating_full_60)
nr_s=70
# simulate rating data
data_rating_70 <- tibble(
syntax = rep(c("subject", "predicate"), each = nr_s*nr_items),
NP = rep(c("basic", "sub"), nr_s*nr_items)
) %>%
mutate(syntax = factor(syntax, levels=c("subject", "predicate")),
NP = factor(NP, levels=c("basic", "sub")),
rating = ifelse( NP == "sub",
ifelse( syntax == "predicate",
my_norm((nr_s*nr_items)/2, 60, 8, 0, 100),
my_norm((nr_s*nr_items)/2, 80, 8, 0, 100)
),
my_norm(nr_s*nr_items, 83, 8, 0, 100)),
Subject = rep(rnorm(2*nr_s, 3, 2), each=nr_items),
Item = rep(rep(rnorm(nr_items, 1, 1), each=nr_s), 2))
contrasts(data_rating_70$syntax) = matrix(c(-1, 1))
contrasts(data_rating_70$NP) = matrix(c(-1,1))
# full model
fit_data_rating_full_70 <- glmer(rating ~ syntax*NP + (syntax*NP || Subject) + (syntax*NP || Item),
data = data_rating_70,
REML = F)
summary(fit_data_rating_full_70)
nr_s=80
# simulate rating data
data_rating_80 <- tibble(
syntax = rep(c("subject", "predicate"), each = nr_s*nr_items),
NP = rep(c("basic", "sub"), nr_s*nr_items)
) %>%
mutate(syntax = factor(syntax, levels=c("subject", "predicate")),
NP = factor(NP, levels=c("basic", "sub")),
rating = ifelse( NP == "sub",
ifelse( syntax == "predicate",
my_norm((nr_s*nr_items)/2, 60, 8, 0, 100),
my_norm((nr_s*nr_items)/2, 80, 8, 0, 100)
),
my_norm(nr_s*nr_items, 83, 8, 0, 100)),
Subject = rep(rnorm(2*nr_s, 3, 2), each=nr_items),
Item = rep(rep(rnorm(nr_items, 1, 1), each=nr_s), 2))
contrasts(data_rating_80$syntax) = matrix(c(-1, 1))
contrasts(data_rating_80$NP) = matrix(c(-1,1))
# full model
fit_data_rating_full_80 <- glmer(rating ~ syntax*NP + (syntax*NP || Subject) + (syntax*NP || Item),
data = data_rating_80,
REML = F)
summary(fit_data_rating_full_80)
summary(fit_data_rating_full_70)
nr_s=120
# simulate inference data
data_infer_120 <- tibble(
syntax = rep(c("subject", "predicate"), each = nr_s*nr_items),
NP = rep(c("basic", "sub", "one"), nr_s*4),
context = rep(c("basic", "sub"), nr_s*nr_items)
) %>%
mutate( syntax = factor(syntax, levels = c("subject", "predicate")),
NP = factor(NP, levels = c("basic", "sub", "one")),
context = factor(context, levels = c("basic", "sub")),
resp_cat = ifelse( context == "sub",
ifelse( NP == "basic",
rbernoulli(nr_s, p=0.8),
rbernoulli(nr_s*2, p=0.45)),
ifelse( NP == "sub",
ifelse( syntax == "predicate",
rbernoulli(nr_s/2, p=0.67),
rbernoulli(nr_s/2, p=0.92)),
rbernoulli(nr_s*2, p=0.92))),
Subject = rep(rnorm(2*nr_s, 3, 2), each=nr_items),
Item = rep(rep(rnorm(nr_items, 0, 1), each=nr_s), 2)
) %>%
mutate(response = ifelse( resp_cat == T, 1, 0))
contrasts(data_infer_120$syntax) = matrix(c(-1,1))
contrasts(data_infer_120$context) = matrix(c(-1,1))
contrasts(data_infer_120$NP) = matrix(c(-1/3, -1/3, 2/3, -1/3, -1/3, 2/3), nrow=3)
# minimal model
# full model
fit_data_infer_120_full <- glmer( response ~ syntax*NP*context + (syntax*NP*context || Subject)
+ (syntax*NP*context || Item),
data=data_infer_120,
family="binomial",
REML = F)
# minimal model
fit_data_infer_120_min <- glmer( response ~ syntax*NP*context + (0 + syntax:NP:context || Subject),
data=data_infer_120,
family="binomial",
REML = F)
nr_s=240
# simulate inference data
data_infer_240 <- tibble(
syntax = rep(c("subject", "predicate"), each = nr_s*nr_items),
NP = rep(c("basic", "sub", "one"), nr_s*4),
context = rep(c("basic", "sub"), nr_s*nr_items)
) %>%
mutate( syntax = factor(syntax, levels = c("subject", "predicate")),
NP = factor(NP, levels = c("basic", "sub", "one")),
context = factor(context, levels = c("basic", "sub")),
resp_cat = ifelse( context == "sub",
ifelse( NP == "basic",
rbernoulli(nr_s, p=0.8),
rbernoulli(nr_s*2, p=0.45)),
ifelse( NP == "sub",
ifelse( syntax == "predicate",
rbernoulli(nr_s/2, p=0.67),
rbernoulli(nr_s/2, p=0.92)),
rbernoulli(nr_s*2, p=0.92))),
Subject = rep(rnorm(2*nr_s, 3, 2), each=nr_items),
Item = rep(rep(rnorm(nr_items, 0, 1), each=nr_s), 2)
) %>%
mutate(response = ifelse( resp_cat == T, 1, 0))
contrasts(data_infer_240$syntax) = matrix(c(-1,1))
contrasts(data_infer_240$context) = matrix(c(-1,1))
contrasts(data_infer_240$NP) = matrix(c(-1/3, -1/3, 2/3, -1/3, -1/3, 2/3), nrow=3)
# minimal model
fit_data_infer_240_min <- glmer( response ~ syntax*NP*context + (0 + syntax:NP:context || Subject),
data=data_infer_240,
family="binomial",
REML = F)
nr_s=300
# simulate inference data
data_infer_300 <- tibble(
syntax = rep(c("subject", "predicate"), each = nr_s*nr_items),
NP = rep(c("basic", "sub", "one"), nr_s*4),
context = rep(c("basic", "sub"), nr_s*nr_items)
) %>%
mutate( syntax = factor(syntax, levels = c("subject", "predicate")),
NP = factor(NP, levels = c("basic", "sub", "one")),
context = factor(context, levels = c("basic", "sub")),
resp_cat = ifelse( context == "sub",
ifelse( NP == "basic",
rbernoulli(nr_s, p=0.8),
rbernoulli(nr_s*2, p=0.45)),
ifelse( NP == "sub",
ifelse( syntax == "predicate",
rbernoulli(nr_s/2, p=0.67),
rbernoulli(nr_s/2, p=0.92)),
rbernoulli(nr_s*2, p=0.92))),
Subject = rep(rnorm(2*nr_s, 3, 2), each=nr_items),
Item = rep(rep(rnorm(nr_items, 0, 1), each=nr_s), 2)
) %>%
mutate(response = ifelse( resp_cat == T, 1, 0))
contrasts(data_infer_300$syntax) = matrix(c(-1,1))
contrasts(data_infer_300$context) = matrix(c(-1,1))
contrasts(data_infer_300$NP) = matrix(c(-1/3, -1/3, 2/3, -1/3, -1/3, 2/3), nrow=3)
# minimal model
fit_data_infer_300_min <- glmer( response ~ syntax*NP*context + (0 + syntax:NP:context || Subject),
data=data_infer_300,
family="binomial",
REML = F)
nr_s=420
# simulate inference data
data_infer_420 <- tibble(
syntax = rep(c("subject", "predicate"), each = nr_s*nr_items),
NP = rep(c("basic", "sub", "one"), nr_s*4),
context = rep(c("basic", "sub"), nr_s*nr_items)
) %>%
mutate( syntax = factor(syntax, levels = c("subject", "predicate")),
NP = factor(NP, levels = c("basic", "sub", "one")),
context = factor(context, levels = c("basic", "sub")),
resp_cat = ifelse( context == "sub",
ifelse( NP == "basic",
rbernoulli(nr_s, p=0.8),
rbernoulli(nr_s*2, p=0.45)),
ifelse( NP == "sub",
ifelse( syntax == "predicate",
rbernoulli(nr_s/2, p=0.67),
rbernoulli(nr_s/2, p=0.92)),
rbernoulli(nr_s*2, p=0.92))),
Subject = rep(rnorm(2*nr_s, 3, 2), each=nr_items),
Item = rep(rep(rnorm(nr_items, 0, 1), each=nr_s), 2)
) %>%
mutate(response = ifelse( resp_cat == T, 1, 0))
contrasts(data_infer_420$syntax) = matrix(c(-1,1))
contrasts(data_infer_420$context) = matrix(c(-1,1))
contrasts(data_infer_420$NP) = matrix(c(-1/3, -1/3, 2/3, -1/3, -1/3, 2/3), nrow=3)
# minimal model
fit_data_infer_420_min <- glmer( response ~ syntax*NP*context + (0 + syntax:NP:context || Subject),
data=data_infer_420,
family="binomial",
REML = F)
View(s_infer60)
# minimal model
fit_data_infer_420_min <- glmer( response ~ syntax*NP*context + (0 + syntax:NP || Subject),
data=data_infer_420,
family="binomial",
REML = F)
summary(fit_data_infer_420_min)
